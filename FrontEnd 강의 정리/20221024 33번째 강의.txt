2022-10-24

------------------------------------------------

// # DOM Update(업데이트)

function App() {
  // const [state, setState] = useState(initialValue);
  // state: 변수
  // setState: state를 업데이트하는 메서드
  // initialValue: state의 초기값
  const[count, setCount] = useState(0); // 구조 분해 할당

  return (
    <>
      <h1>Count</h1>
      <p>{count}</p>
      {/* () => setCount(count + 1) <= eventHandler // 지금 상황에선 익명함수를 eventHandler로 사용한 것 */}
      <button onClick={() => setCount(count + 1)}>add</button>
    </>
  )
}

------------------------------------------------------

// state Hook 없이 DOM 업데이트 하기
// -> state Hook 없이는 업데이트가 되지 않는다는 걸 알 수 있다.
function App() {
  let count = 0;

  // DOM을 업데이트하기 위해서는 virtualDOM을 다시 return해야 한다.
  // virtualDOM을 다시 return하기 위해서는 컴포넌트를 다시 실행해야 한다.
  // setState는 컴포넌트를 다시 실행한다.
  // DOM이 업데이트된다.
  function handleClick(e) {
    count++;
    console.log(count); // count 값이 증가는 하나 DOM이 업데이트는 되지 않는다.
  }

  return (
    <>
     <h1>Count</h1>
     <p>{count}</p>
     <button onClick={handleClick}>Add</button>
    </>
  )
}

-------------------------------------------------------------------

// 시계
// eventHandler 없이 DOM 업데이트가 되고 있다.

function App() {
  // console.log("App Loaded!"); // 앱이 잘 작동하는 지를 알 수 있다.

  const initialTime = new Date().toLocaleTimeString();
  const [time, setTime] = useState(initialTime);

  setTimeout(() => {
    const updatedTime = new Date().toLocaleTimeString();
    setTime(updatedTime);
  }, 1000)

  return (
    <>
      <h1>시계</h1>
      <p>{time}</p>
    </>
  )
}

-----------------------------------------------------
// Q.1

function App() {
  const [count, setCount] = useState(0);
  console.log(count);

  return(
    <>
      <h1>Count</h1>
      <p>{count}</p>
      <button onClick={() => setCount(count - 1)}>-</button>
      <button onClick={() => setCount(count + 1)}>+</button>
    </>
  )
}

----------------------------------------------------

// Q.2 구독하기

// function App() {
//   const [subscribe, setSubscribe] = useState(false);
  
//   console.log(subscribe);
//   return (
//     <>
//       <h1>Subscribe</h1>
//       <button onClick={() => setSubscribe(subscribe + 1)}>{subscribe ? "구독중" : "구독하기"}</button>
//     </>
//   )
// }

// ---------------------------------------------------
// 강사풀이

function App() {
  const [subscribe, setSubscribe] = useState(false);
  
  console.log(subscribe);
  return (
    <>
      <h1>Subscribe</h1>
      <button onClick={() => setSubscribe(!subscribe)}>{!subscribe ? "구독중" : "구독하기"}</button>
    </>
  )
}

-------------------------------------------------------
// 강사풀이2 handleClick

function App() {
  const [subscribe, setSubscribe] = useState(false);
  
  function handleClick(e) {
    // console.log(subscribe); // false
    // console.log(!subscribe); // true
    if (subscribe) {
      setSubscribe(false);
    } else {
      setSubscribe(true);
    }
  }
  return (
    <>
      <h1>Subscribe</h1>
      <button onClick={handleClick}>{subscribe ? "구독중" : "구독하기"}</button>
    </>
  )
}

-------------------------------------------------

// Q.3 Subscribe 숫자표현

function App() {
  const [subscribe, setSubscribe] = useState(false);
  const [subscribers, setSubscribers] = useState(0);

  function handleClick(subscribe) {
    if (subscribe) {
      setSubscribe(false);
      setSubscribers(subscribers -1);
    } else {
      setSubscribe(true);
      setSubscribers(subscribers +1);
    }
  }

  return (
    <>
      <h1>Subscribe</h1>
      <p>구독자 수:{subscribers}</p>
      <button onClick={() => handleClick(subscribe)}>
        {!subscribe ? "구독하기" : "구독중"}
      </button>
    </>
  )
}

---------------------------------------------------------

// # Form 다루기

function App() {
  const [username, setUsername] = useState("");
  
  // Form 제출하기
  function handleSubmit(e) {
    e.preventDefault();
    console.log("username:", username);
    // Form 제출 시 공백만들기 with value={username}
    setUsername("");
  }

  function handleChange(e) {
    const value = e.target.value;
    const username = value.trim(); // 지역변수

    console.log(username);

    setUsername(username); // username = const username = value.trim();
    // console.log(!"") // true
    // console.log(!"foo") //false
  }

  return (
    <form onSubmit={handleSubmit}>
      <h1>Login</h1>
      <input
        type="text"
        placeholder="Username"
        value={username}
        onChange={handleChange}
      />
      <button 
        type="submit" 
        disabled={!username}
      >
        Login
      </button>
    </form>
  )
}

-------------------------------------------------------------------

// Q.4 Password Toggle

function App() {
  const [type, setType] = useState("password");

  function handleClick() {
    if (type === "password") {
      setType("text");
    } else {
      setType("password");
    }
  }

  return(
    <form>
      <h1>Login</h1>
      <input
        type={type}
        placeholder="Password"
      />
      <button type='button' onClick={handleClick}>
        {type === "password" ? "Show" : "Hide"}
      </button>
    </form>
  )
}

























































































































