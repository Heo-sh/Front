2022-09-21

----------------------------------------------

// # Spread Syntax (전개 구문) - 문법

-----------------------------------------------

// Array : Array의 item을 간단하게 복사할 수 있다.
// Object : Object의 속성을 간단하게 복사할 수 있다.
// ...Array의 이름

// Array
// push()와 기능은 비슷하다.
// const arr = ["foo", "bar"];
// const r = [...arr, "baz"]; // -> 새로운 Array로 생성

// console.log(arr); // ['foo', 'bar']
// console.log(r); // ['foo', 'bar', 'baz']

// concat(): concatenation(연결)과 비슷
// const arr1 = ["foo", "bar"];
// const arr2 = ["baz"];

// const r = [...arr1, ...arr2]; // 다른 Array끼리 합치기 가능
// console.log(r); // ['foo', 'bar', 'baz']

// const r = [...arr2, ...arr1];
// console.log(r); // ['baz', 'foo', 'bar']

// slice()와 비슷
// const arr = ["foo", "bar", "baz"];

// const [item0, ...rest] = arr; // Distructing과 같이 사용
// console.log(item0); // foo
// console.log(rest); // ['bar', 'baz'] rest는 나머지 Array를 return한다. 굳이 rest가 아니어도 된다.

// -----------------------------------------------
// Q1. Spread 문법을 사용하여 일본 맥주를 추가해보세요.

// const beers = [
//     {name: "Heineken", origin: "Netherlands"},
//     {name: "Kloud", origin: "S.Korea"},
//     {name: "Guinness", origin: "Ireland"}
// ];

// const japaneseBeer = {name: "Asahi", origin: "Japan"};

// console.log([...beers, japaneseBeer]);

// const f = [...beers, japaneseBeer]; // japaneseBeer는 Array가 아니기에 ...을 붙이면 안된다.
// console.log(f);

// ----------------------------------------------

// Object

// 속성 update
// const o = {prop1: "foo", prop2: "bar", prop3: "baz"};
// console.log(o); // {prop1: 'foo', prop2: 'bar', prop3: 'baz'}
// const r = {...o, prop2: null}; // ...o: 기존 Object의 속성들
// console.log(r); // {prop1: 'foo', prop2: null, prop3: 'baz'}

// 속성 추가
// const o = {prop1: "foo", prop2: "bar"};
// const r = {...o, prop3: "baz"};
// console.log(o); // {prop1: 'foo', prop2: 'bar'}
// console.log(r); // {prop1: 'foo', prop2: 'bar', prop3: 'baz'}

// -----------------------------------------
// Q2. dutchBeer에 현재 이용가능한 맥주인지를 나타내는 새로운 속성
// available: true를 추가해보세요.
// (Object의 Spread 문법 사용)

// const dutchBeer = {name: "Heineken", origin: "Netherlands"};

// const DutchBeer = {...dutchBeer, abailable: true};

// console.log({...dutchBeer, available: true}); // Object에 새로운 속성을 추가할 시 {}를 사용해야한다.
// console.log(DutchBeer);

// ----------------------------------------------
// Q3. 기네스 맥주가 재입고가 되었다.
// Guinness 맥주의 available의 값을 true로 바꾸어보세요.
// map() 메서드와 Spread 문법을 사용

// const beers = [
//     {name: "Heineken", origin: "Netherlands", available: true},
//     {name: "Kloud", origin: "S.Korea", available: true},
//     {name: "Guinness", origin: "Ireland", available: false}
// ]

// map(callback) callback 내에서도 if/else 사용 가능

// const f = beers.map(beer => { // beers -> Array를 나타낸다.
//     if (beer.available == false) { // beer는 beers의 item
//         return {...beer, available: true}
//     }
//     return beer;
// })

// console.log(f);

// 강사풀이 ---------------------------------------------------------

// const r = beers.map(beer => {
//     return {...beer, available: true}
// })
// console.log(r);

// const r = beers.map(function (beer) {
//     return {...beer, available: true}
// })
// console.log(r);

// const r = beers.map(beer => {
//     if (beer.name == "Guinness") {
//         return {...beer, available: true}
//     }
//     return beer;
// })

// console.log(r);

// const r = beers.map(beer => {
//     beer.available = true
//     return beer;
// })
// console.log(r);

// const f = beers.map(function (beer) {
//     beer.available = true
//     return beer;
// })
// console.log(f);

// -----------------------------------------------------------

// # JavaScript 비동기(Asynchronous) 프로그래밍
// 작업 과정(코드 실행 과정)에서 Blocking(막힘)을 다루기 위한 방법
// ex) 서버로부터 데이터를 요청하는 것과 그에 대한 처리

// function f(callback) {
//     callback()
// }

// // f함수는 동기(synchronous)함수이다.
// // 호출된 순서대로 실행된다.
// f(() => {
//     console.log("foo");
// })
// console.log("bar");

// setTimeout(callback, ms) : ms 후에 callback 실행
// setTimeout(() => {
//     console.log("foo");
// }, 1000)
// console.log("bar");

// setTimeout(): 대표적인 비동기 함수이다.
// 비동기함수는 가장 마지막에 실행된다.
// console.log("baz");
// setTimeout(() => {
//     console.log("foo")
// }, 1000)
// console.log("bar");

// real world 예제
// 서버에게 데이터 요청하기

// 비동기 함수
// 서버에 데이터를 요청하는 함수이다.
// function fetchData(callback) {
//     const o = {foo: "bar"};

//     setTimeout(() => {
//         callback(o)
//     }, 1000)
// }

// // 데이터를 가져오는데 1초가 걸린다고 가정
// fetchData(data => { // data = callback => {foo: "bar"}
//     console.log("data", data) // data {foo: 'bar'}
// })

// console.log("다른 작업");

// 비동기에서 에러 다루기
// 서버에 데이터 요청하는 예제

// function fetchData(id, callback) { // 2. id에 null이 전달
//     if (!id) { // !id(id가 없을때) => id === null // !null = true // !undefined = true // !"" = true 
//         const err = new Error("id is required"); // 3. id가 null이므로 Error Object를 생성

//         setTimeout(() => {
//             callback(err, null) // 4. callback에 err와 null을 전달
//         }, 0)
//         return;
//     }

//     const o = {foo: "bar"};

//     setTimeout(() => {
//         callback(null, o)
//     })
// }

// // fetchData() 함수 호출
// fetchData(null, (err, data) => { // 1. null과 err, data 인자를 전달
//     if (err) {
//         throw err; // 5. err가 있기에 const err를 throw한다.
//     }
//     console.log("data", data);
// })






































































































