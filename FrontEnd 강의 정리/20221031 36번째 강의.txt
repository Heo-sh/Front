2022-10-31

----------------------------------------------

// # Drawer (ex: 댓글기능)

function App() {
  const [active, setActive] = useState(false);

  const style = {
    position: "fixed",
    bottom: "0",
    left: "0",
    width: "100%",
    // dynamic style
    maxHeight: active ? "100px" : "0",
    backgroundColor: "#eee",
    transition: "0.2s",
  }

  const drawer = (
    <div style={style} onClick={() => setActive(false)}>
      <ul>
        <li>list item</li>
        <li>list item</li>
        <li>list item</li>
      </ul>
    </div>
  )

  console.log(style.maxHeight);

  return (
    <>
      <h1>Drawer</h1>
      <button
        onClick={() => setActive(true)}
      >
        Button
      </button>
      {drawer}
    </>
  )
}

----------------------------------------------------------------

// Q.Navigation => Sidebar

// function App() {
//   const [active, setActive] = useState(false);

//   const style = {
//     position: "fixed",
//     top: "0",
//     left: "0",
//     width: "100%",
//     height: "100%",
//     display: active ? "block" :"none",
//     backgroundColor: "#eee",
//     zIndex: "1"
//   }

//   const Navigation = (
//     <div style={style} onClick={() => setActive(false)}>
//       <ul>
//         <li>list item</li>
//         <li>list item</li>
//         <li>list item</li>
//       </ul>
//     </div>
//   )

//   return (
//     <>
//       <h1>Navigation</h1>
//       <button
//         onClick={() => setActive(true)}
//       >
//         Button
//       </button>
//       {Navigation}
//     </>
//   )
// }

// ---------------------------------------------------
// 강사풀이

function App() {
  const [active, setActive] = useState(false);

  const style = {
    sideBar: {
      position: "fixed",
      backgroundColor: "#fff",
      top: "0",
      // dynamic
      left: active ? "0" : "-200px",
      zIndex: "1",
      width: "200px",
      height: "100%",
      transition: "0.2s"
    },
    overlay: {
      position: "fixed",
      top: "0",
      left: "0",
      width: "100%",
      height: "100%",
      backgroundColor: "rgba(0 0 0 / 0.2)",
      // dynamic
      display: active ? "block" : "none"
    }
  }

  return (
    <>
      <h1>Navigation</h1>

      {/* Button */}
      <button
        onClick={() => setActive(true)}
      >
        Button
      </button>

      {/* Navigation */}
      <nav style={style.sideBar}>
        <ul>
          <li>list item</li>
          <li>list item</li>
          <li>list item</li>
        </ul>
      </nav>

      {/* Overlay */}
      <div
        style={style.overlay}
        onClick={() => setActive(false)}
      >
      </div>
    </>
  )
}

---------------------------------------------

// # Carousel

function App() {
  const [index, setIndex] = useState(0);

  console.log(index);

  const images = ["foo.jpg", "bar.jpg", "baz.jpg"];

  const container = {
    width: "100px",
    height: "100px",
    backgroundColor: "#ddd",
    display: "inline-flex",
    // dynamic
    transform: `translateX(-${index*100}px)`,
    transition: "0.2s"
  }

  const item = {
    width: "100%",
    height: "100%",
    border: "1px dashed",
    flexShrink: "0",
    display: "flex",
    justifyContent: "center",
    alignItems: "center"
  }

  const list = images.map(image => (
    <div key={image} style={item}>
      {image}
    </div>
  )) 

  return (
    <>
      <h1>Carousel</h1>

      {/* Images */}
      <div className=''>
        <h3>Images</h3>
        <div className='container' style={container}>
          {list}
        </div>
      </div>
      
      {/* Navigation */}
      <div className=''>
        <h3>Navigation</h3>
        <button
          onClick={() => setIndex(index - 1)}
          style ={{visibility: index === 0 && "hidden"}}
        >
          Prev
        </button>
        <button
          onClick={() => setIndex(index + 1)}
          // style = {{visibility: index === 2 && "hidden"}}
          // 반복문에 맞춰서 숫자를 바꿀 필요가 없다.
          style ={{visibility: index === images.length - 1 && "hidden"}}
        >
          Next
        </button>
      </div>

      {/* Indicator */}
      <div>
        <h3>Indicator</h3>
        <div>
          {images.map((image, dot) => (
            <span
              key={dot}
              style={{color: dot === index && "red"}}
            >
              *
            </span>
          ))}
        </div>
      </div>
    </>
  )
}

------------------------
react-basic/
npm install react-router-dom

import {BrowserRouter as Router, Routes, Route, Link, Outlet, useParams, useNavigate} from
"react-router-dom"

react router.com v6
---------------------------------------

// # Router

function Home() {
  return <h1>Home</h1>
}

function Posts() {
  return (
    <>
      <h1>Posts</h1>
      <ul>
        <li>
          {/* Link: html의 a태그와 비슷 */}
          <Link to="/post/p1">Post 1</Link>
        </li>
        <li>
          <Link to="/post/p2">Post 2</Link>
        </li>
      </ul>
    </>
  )
}

function Post() {
  // useParams(): url로 전달된 parameter를 가지고 있는
  // 객체를 return한다.
  const params = useParams();
  const postId = params.postId;

  console.log(params);
  // params: 파라미터의 key값과 value값을 가진 object이다.

  return (
    <>
      <h1>Post</h1>
      <p>{postId}</p>
    </>
  )
}

function Contact() {
  return <h1>Contact</h1>
}

function NotFound() {
  return <h1>404 NotFound</h1>
}

function App() {
  return (
    <Router>
      {/* Navigation */}
      <nav>
        <ul>
          <li>
            <Link to="/">Home</Link>
          </li>
          <li>
            <Link to="/posts">Posts</Link>
          </li>
          <li>
            <Link to="/contact">Contact</Link>
          </li>
        </ul>
      </nav>

      {/* Routes */}
      {/* Routes 안에는 Route 이외에 다른 컴포넌트가 들어가면 안된다. */}
      <Routes>
        <Route path="/" element={<Home />} />
        {/* path와 element는 Route의 attribute이다. */}
        {/* path는 입력받은 url을 element는 입력받은 url에 맞는 컴포넌트를 return한다. */}
        <Route path="/posts" element={<Posts />} />
        <Route path="/post/:postId" element={<Post />} />
        <Route path="/contact" element={<Contact />} />
        {/* 요청받은 url에 일치하는 Route가 없을 때 나타난다. 
        *: 를 사용했기에 가장 마지막에 있어야한다.*/}
        <Route path="*" element={<NotFound />} />
      </Routes>
    </Router>
  )
}