2022-09-26

// function f(callback) {
//     callback()
// }

// f(() => { // 동기(synchronous)함수 : 호출된 순서대로 실행된다.
//     console.log("foo"); // first return -> foo
// })
// console.log("bar"); // second return -> bar

// function f(callback) {
//     setTimeout(() => {
//         callback()
//     }, 0)
// }

// f(() => { // f는 비동기(asynchronous)함수 : 호출순서와 상관없이 가장 마지막에 실행된다.
//     console.log("foo"); // second return -> foo
// })
// console.log("bar"); // first return -> bar

// 실제 사용예시

// function fetchData(callback) {
//     const o = {foo: "bar"}

//     setTimeout(() => {
//         callback(o)
//     }, 1000)
// }

// fetchData((data) => { // fetchData : 비동기함수 // 서버에 데이터 요청
//     console.log("data", data); // second return
// }) // ex) youtube 새로고침 시 어떻게 사용되는지 파악할 수 있다.
// console.log("다음 작업"); // first return

// 비동기 함수에서 에러 처리

// function fetchData(id, callback) {
//     if (!id) {
//         const err = new Error("id is required");

//         setTimeout(() => {
//             callback(err, null);
//         }, 0)
//         return;
//     }

//     const o = {foo: "bar"};

//     setTimeout(() => {
//         callback(null, o);
//     }, 0) 
// }

// // 서버에 데이터를 요청함
// fetchData(null, (err, data) => {
//     try {
//         if (err) {
//             throw err;
//         }
//         console.log("data", data);
//     } catch(error) {
//         console.error(error);
//     }
// })

// ---------------------------------------------

// # Promise
// Promise 객체는 비동기 작업의 성공/ 실패 여부와 그 결과값을 나타낸다.
// 비동기 작업의 가독성을 높이기 위해 사용된다.

// 구조
// Promise class를 이용하여 인스턴스 만들기

// const o = new Promise((res, rej) => {
//     // res: resolve(fullfilled)
//     // 비동기 작업의 성공
//     // res("foo")

//     // rej: rejected
//     // 비동기 작업의 실패
//     rej("bar")
// })
// console.log(o); // Promise {<pending>} -> 보류중 : 결과값이 정해지지 않았을 때 나오는 return값
//                 // 상태: fullfilled, 결과값: "foo"
//                 // 상태: rejected, 결과값: "bar" 

// astnc function을 사용해서 인스턴스 만들기

// async function f() {
//     // resolve(fullfilled)
//     // 비동기 작업의 성공
//     // return "foo"

//     // rejected
//     // 비동기 작업의 실패
//     throw "bar"
// }

// console.log(f()); // 상태: fullfilled, 결과값: "foo"
//                   // 상태: rejected, 결과값: "bar"

// 실제 사용예시
// 에러처리에 분리할 수 있다는 장점이 있다.
// async function fetchData() {
//     const o = {foo: "bar"};
//     return o;
// }

// // 서버에 데이터를 요청한다.
// fetchData() // Promise 객체는 비동기적으로 작동한다.
// .then(data => { // <- .then은 Promise의 메소드이다. .then 메소드의 callback 안에서 데이터를 처리한다.
//     console.log(data); // second return
// })

// console.log("다음 작업"); // first return

// Promise 객체에서 에러 처리
// 데이터 처리와 error처리를 분리함에 있어서 가독성이 좋아짐. => 코드의 간결화
// async function fetchData(id) {
//     if (!id) {
//         const err = new Error("id is required");
//         throw err;
//     }

//     const o = {foo: "bar"};
//     return o;
// }

// // 서버에 데이터를 요청
// // Promise를 사용한 방법
// fetchData(null)
// .then(data => { // 데이터를 처리한다.
//     console.log("data", data);
// })
// .catch(err => { // error 처리
//     console.error(err);
// })

// // 비동기함수를 사용한 방법
// fetchData(null, (err, data) => {
//     try {
//         if (err) {
//             throw err;
//         }
//         console.log("data", data);
//     } catch(error) {
//         console.error(error);
//     }
// })

// Promise의 async/await 문법
// 비동기 작업을 동기 작업처럼 할 수 있게 만든다.
// 가독성면에서 가장 좋다.

// async function fetchData(id) {
//     if (!id) {
//         const err = new Error("id is required");
//         throw err;
//     }

//     const o = {foo: "bar"};
//     return o;
// }

// f()
// async function f() {
//     try {
//         // await: 비동기작업이 끝날 때까지 기다린다. 결과값이 나올때까지 기다린다.
//         // await은 async 함수 내부에서만 사용가능
//         const data = await fetchData(null);
//         console.log(data);

//         console.log("다음 작업");

//     } catch (error) {
//         console.error(error);
//     }
// }

// -----------------------------------------------------------------------

// # JSON
// JavaScript Object Notation (JavaScript 객체 표기법)
// JavaScript 객체를 저장하거나 전송하기 위한 "텍스트" 포맷

// const o = {foo: "bar"};
// const json = '{"foo": "bar"}'

// console.log(o); // Object
// console.log(json); // json 포맷(텍스트) 
// console.log(typeof json); // String(문자열)

// const o = {foo: "bar"};
// // JSON.stringfy(): Object를 json 포맷으로 변환한다.
// const r = JSON.stringify(o);

// console.log(r);

// JSON.stringfy()를 간결하게 쓸 수도 있다.
// const a = JSON.stringify({foo: "bar"});
// console.log(a);

// const json = '{"foo": "bar"}';
// // JSON.parse(json): json포맷을 Object로 변환
// const r = JSON.parse(json);
// console.log(r);
// console.log(typeof r) // object

// const r = JSON.parse(a);
// console.log(r);

// const arr = '[{"prop1": "foo", "prop2": "bar"}]';

// const r = JSON.parse(arr);
// console.log(r);

// -------------------------------------------------------------------------

<h1>BOM and DoM</h1>
<p>BOM: Browser Object Model</p>
<p>DOM: Document Object Model</p>

// ----------------------------------------------------

# Browser Object
- console.log(window); -> 웹개발의 시작
- 열려있는 tap 하나가 하나의 window object이다.
- window Object의 속성과 메서드는 웹개발에 필요한 툴키트이다.
  ex)  console.log(window.navigator); : 접속한 browser의 위치를 알려준다.
        console.log(window.screen); : 접속한 유저의 디바이스의 화면 정보
        console.log(window.location); : 현재 접속한 웹페이지의 정보 (URL 등)
        console.log(window.history); : 유저의 웹브라우징에 관한 기록 등
        console.log(XMLHttpRequest); : AJAX 요청 (서버에 데이터를 요청하는 방법)

// ---------------------------------------------------

# Document Object
- console.log(window.document) // HTML 문서(document object) 호출

// ---------------------------------------------------

    <h1>DOM(HTML)에 접근하기</h1>

    <script>
        console.log(window.document);
        console.log(window.document.title); // document object의 title
        console.log(window.document.body);
    </script>
//-----------------------------------------------------------

    <h1>DOM 선택자</h1>
    <p>태그이름으로 선택하기</p>
    <ul>
        <li>foo</li>
        <li>bar</li>
        <li>baz</li>
    </ul>

    <script>
        // querySelector(태그이름) 태그이름으로 element를 선택한다.
        const ul = document.querySelector("ul");
        // querySelectorAll(태그이름) 태그이름을 가진 모든 element를 선택한다.
        const li = document.querySelectorAll("li");

        console.log(ul);
        console.log(li); // NodeList: array와 비슷하지만 아니다. 즉 array의 속성과 메서드를 사용할 수 없으나, 몇 개는 가능하다.
        console.log(li[0]); // index를 통해 특정한 element에 접근가능
        console.log(li.length); // length를 통해 element의 갯수 파악가능
    </script>

// ----------------------------------------------------------------

    <h1>DOM 선택자</h1>
    <p>id, class</p>

    <ul>
        <li id="foo" class="item">foo</li>
        <li class="item">bar</li>
        <li class="item">baz</li>
    </ul>

    <script>
        // getElementById(id): 괄호 안의 id를 가진 element를 선택한다. id는 한 element 당 하나만 가질 수 있으며, 중복이 되지 않는다.
        const foo = document.getElementById("foo");
        console.log(foo);

        // getElementsByClassName(class): class를 가진 element를 "모두" 선택한다. 개별선택을 할 시는 getElementsById를 사용하는 게 좋다.
        const items = document.getElementsByClassName("item");

        console.log(items); // HTMLCollection: NodeList랑 비슷하다고 봐도 무관
        console.log(items[0]);
        console.log(items.length);

    </script>

//------------------------------------------------------

    <h1>DOM 선택자</h1>
    <P>id, class로 선택하기 2</P>

    <ul>
        <li id="foo" class="item">foo</li>
        <li class="item">bar</li>
        <li class="item">baz</li>
    </ul>

    <script>
        // querySelector(#id): id를 가진 element를 선택한다.
        const foo = document.querySelector("#foo");
        console.log(foo);

        // querySelectorAll(.class): class를 가진 element를 모두 선택한다.
        const items = document.querySelectorAll(".item");
        console.log(items); // NodeList
    </script>






















































































